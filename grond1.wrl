#VRML V2.0 utf8

EXTERNPROTO Boom [ exposedField SFVec3f translation] ["boom.wrl"]
EXTERNPROTO Socket [ exposedField SFVec3f translation] ["socket.wrl"]
EXTERNPROTO Robot
[
	exposedField  SFVec3f translation
	exposedField  SFRotation rotation
	exposedField  SFInt32 whichChoice
	exposedField  SFFloat transparency
]
["robot.wrl"]

EXTERNPROTO Boulder
[
	exposedField  SFVec3f translation
	exposedField  SFInt32 whichChoice
	eventIn       SFInt32 set_index
	eventIn       SFNode  set_script
	eventIn       SFTime fadeout
]
["boulder.wrl"]

Background
{ 
	skyColor [ 0 0 0.3 ]
}

#Viewpoint
#{ 
#	position       10 10 30
#	description    "AJ's gezichtspunt"
#}

DEF V1 Viewpoint
{ 
	position       18.5 9.5 18.5
	description    "Sentinel 1"
#	jump FALSE
}

DEF V2 Viewpoint
{ 
	position       18.5 9.5 18.5
	description    "Sentinel 2"
#	jump FALSE
}

DirectionalLight
{ 
	direction      0 -1 0
}

NavigationInfo
{ 
#  type [ "EXAMINE" ]
}

DEF Sentinel Group
{
	children
	[	
		DEF Clicker TouchSensor {}
		Shape
		{ 
			geometry DEF Grond IndexedFaceSet
			{
				colorPerVertex FALSE
				solid FALSE
				coord DEF coord Coordinate { }
				color Color
				{
					color [ 0 0 0, 0 0 1, 0 1 0, 0 1 1, 0.2 0.2 0.2, 1 0 1, 1 1 0, 1 1 1 ]
				}
			}
			appearance Appearance
			{
				material Material { diffuseColor 1 0 0 }
			}
		}
		DEF Robots Group
		{
			children
			[
				Robot
				{
					whichChoice -2
					transparency 0
					translation 18.5 9.0 18.5
				}
				Robot { }
				Robot { }
				Robot { }
				Robot { }
			]
		}
		DEF Boulders Group
		{
			children
			[
				Boulder { }
				Boulder { }
				Boulder { }
				Boulder { }
				Boulder { }
			]
		}
		DEF SentinelScript Script
		{ 
			# Declarations of what's in this Script node:
			directOutput TRUE
			mustEvaluate TRUE
		  	field MFVec3f point []
			field SFNode Grond USE Grond
			field SFNode coord USE coord
			field MFInt32 coordIndex [ ]
			field MFInt32 colorIndex [ ]
			field SFNode Robots USE Robots
			field SFNode Boulders USE Boulders
			eventIn SFVec3f hitPoint_changed
			eventOut SFVec3f set_translation
			eventIn SFTime openVault
			eventIn SFString newcommand
			eventIn SFInt32 boulder_touched
			eventIn SFBool isBoundV1
			eventIn SFBool isBoundV2
			field SFNode socket Socket { translation 4.5 11 12.5 }
			field SFNode sentinel USE Sentinel
			field SFNode myself USE SentinelScript
			field SFNode view1 USE V1
			field SFNode view2 USE V2
			field SFBool toggle FALSE
			field SFNode currentrobot Transform { }
#			field SFNode newrobot Transform { }
			eventOut SFNode kwats
			url "javascript:
			var row, kol, i, j, k;
			var vertex;
			var color;
			var hitPoint;
			var hitTime;
			var command;
			var objectindex;
			var newrobot;
//			var currentrobot;
			var oldview;		
			var newview;		

			function assign_views()
			{
				print('toggle='+toggle);
				if (toggle)
				{
					oldview = view2; 
					newview = view1;
				}
				else
				{
					oldview = view1; 
					newview = view2;
				}
			}
			function new_view()
			{
				newview.set_bind = true;
				toggle = !toggle;
				assign_views();
			}
			function isBoundV1(value)
			{
				if (toggle)
				{
				}
				else
				{
					if (newrobot != null)
					{
						print('isBoundV1: value = ' + value + ', toggle = ' + toggle + ', newrobot = ' + newrobot.translation);
						if (!value)
						{
							print('newrobot.set_whichChoice = -1');
							newrobot.set_whichChoice = -2;
						}
					}
				}
			}
			function isBoundV2(value)
			{
				print('isBoundV2: value = ' + value + ', toggle = ' + toggle + ', currentrobot = ' + currentrobot.translation);
				if (toggle)
				{
				}
				else
				{
					if (currentrobot != null)
					{
						if (value)
						{
							print('currentrobot.set_whichChoice = 0');
							currentrobot.set_whichChoice = 0;
							view1.set_orientation = view2.orientation;
							view1.set_position = view2.position;
							currentrobot = newrobot;
							toggle = !toggle;
						}
					}
				}
			}
			function initialize()
			{
				var RowSize;
				var ColSize;
				var p1, p2, p3, p4;
				var c1, c2, c3, c4;
				var yCoord = new Array
				(
		//			          0   1   2   3   4   5   6   7   8   9  10  11  12  13  14  15  16  17  18  19  20  21  22  23  24  25		
					new Array(9, 10, 10, 10, 10, 10, 10,  9,  9,  9,  9,  9,  9,  8,  8,  8,  8,  9,  9,  9,  9,  9,  8,  7,  6,  6),
					new Array(9, 10, 10, 11, 11, 10, 10, 10, 10, 10, 10, 10, 10,  9,  9,  9,  9, 10, 10, 10, 10,  9,  8,  7,  7,  7),
					new Array(9, 10, 10, 11, 11, 10, 10, 10, 10, 10, 11, 11, 11,  9, 10, 10, 10, 10, 10, 10, 10,  9,  8,  8,  8,  8),
					new Array(9, 10, 10, 10, 10, 10,  9,  9, 10, 10, 11, 11, 11, 11, 10, 10, 10, 10, 10, 10, 10, 10,  9,  9,  9,  9),
					new Array(9, 10, 10, 10, 10,  9,  9,  9,  9, 10, 11, 11, 11, 11, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10),
					new Array(9, 10, 10, 10, 10,  9,  9,  9,  9, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10),
					new Array(9, 10, 10, 10, 10,  9,  9,  9,  9,  9,  9,  9,  9,  9,  9,  9, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10),
					new Array(9, 10, 10, 10, 10,  9,  9,  9,  9,  9,  8,  8,  8,  8,  8,  8,  9,  9,  9, 10, 10, 10, 10, 10, 10, 10),
					new Array(8,  9, 10, 10, 10,  9,  9,  9,  9,  8,  8,  8,  8,  8,  8,  8,  8,  8,  8,  9,  9,  9,  9,  9,  9,  9),
					new Array(8,  9, 10, 10, 10,  9,  9,  8,  8,  8,  8,  8,  8,  8,  7,  7,  8,  8,  8,  9,  9,  9,  9,  9,  9,  9),
					new Array(9,  9, 10, 10, 10, 10,  9,  8,  8,  8,  8,  8,  8,  8,  7,  7,  7,  7,  7,  8,  8,  9,  9,  9,  9,  9),
					new Array(9, 10, 11, 11, 11, 10, 10,  9,  9,  9,  9,  9,  8,  8,  7,  7,  7,  7,  7,  8,  8,  9,  9,  9,  9,  9),
					new Array(9, 10, 11, 11, 11, 11, 10, 10,  9,  9,  9,  9,  8,  8,  7,  7,  7,  7,  7,  8,  8,  9,  9,  9,  9,  9),
					new Array(9, 10, 11, 11, 11, 11, 10, 10, 10, 10,  9,  9,  8,  8,  7,  7,  8,  8,  8,  8,  8,  9,  9,  9,  9,  9),
					new Array(9, 10, 10, 11, 11, 10, 10, 10, 10, 10,  9,  9,  8,  7,  7,  7,  8,  8,  9,  9,  9,  9,  9,  9,  9,  9),
					new Array(9, 10, 10, 10, 10, 10,  9,  9,  9,  9,  9,  9,  9,  7,  7,  7,  8,  8,  9,  9,  9,  9,  9,  9,  9,  9),
					new Array(9, 10, 10, 10, 10, 10,  9,  8,  8,  9,  9,  9,  8,  7,  7,  7,  8,  8,  9,  9,  9,  9,  9,  9,  9,  8),
					new Array(9, 10, 10, 10, 10, 10,  8,  8,  8,  8,  9,  9,  8,  7,  7,  7,  8,  8,  9,  9, 10, 10,  9,  9,  9,  8),
					new Array(9, 10, 10, 10, 10, 10,  8,  8,  8,  8,  9,  9,  8,  7,  7,  7,  7,  8,  9,  9, 10, 10,  9,  9,  8,  7),
					new Array(9, 10, 10, 10, 10, 10,  9,  8,  8,  8,  9,  9,  8,  7,  7,  7,  7,  8,  9,  9,  9,  9,  9,  9,  8,  7)
				);
				command = 'boulder';
				sentinel.addChildren = new MFNode(socket);
				RowSize = yCoord.length;
				ColSize = yCoord[0].length;
				i = RowSize * ColSize;
				color = 1;
				newrobot = null;
				currentrobot = Robots.children[0];
				assign_views();
				for (row = RowSize - 1; row >= 0; row--)
				{
					for (col = ColSize - 1; col >= 0; col--)
					{
						vertex = new SFVec3f(col, yCoord[row][col], row);
						point[--i] = vertex;
					}
				}
				j = 0;
				k = 0;
				for (row = 0; row < RowSize - 1; row++)
				{
					for (col = 0; col < ColSize - 1; col++)
					{
						p1 = yCoord[row][col];
						p2 = yCoord[row][col + 1];
						p3 = yCoord[row + 1][col + 1];
						p4 = yCoord[row + 1][col];
						c1 = row * ColSize + col;
						c2 = c1 + 1;
						c3 = c2 + ColSize;
						c4 = c1 + ColSize;
		
						if (p1 != p2 && p1 != p3 && p1 != p4)
						{
							coordIndex[j++] = c1;	
							coordIndex[j++] = c2;	
							coordIndex[j++] = c3;	
							coordIndex[j++] = -1;
							colorIndex[k++] = 4;
							coordIndex[j++] = c1;	
							coordIndex[j++] = c3;	
							coordIndex[j++] = c4;	
							coordIndex[j++] = -1;	
							colorIndex[k++] = 4;
						}
						else if (p2 != p1 && p2 != p3 && p2 != p4)
						{
							coordIndex[j++] = c1;	
							coordIndex[j++] = c2;	
							coordIndex[j++] = c4;	
							coordIndex[j++] = -1;	
							colorIndex[k++] = 4;
							coordIndex[j++] = c2;	
							coordIndex[j++] = c3;	
							coordIndex[j++] = c4;	
							coordIndex[j++] = -1;	
							colorIndex[k++] = 4;
						}
						else if (p3 != p1 && p3 != p2 && p3 != p4)
						{
							coordIndex[j++] = c1;	
							coordIndex[j++] = c2;	
							coordIndex[j++] = c3;	
							coordIndex[j++] = -1;	
							colorIndex[k++] = 4;
							coordIndex[j++] = c1;	
							coordIndex[j++] = c3;	
							coordIndex[j++] = c4;	
							coordIndex[j++] = -1;	
							colorIndex[k++] = 4;
						}
						else if (p4 != p1 && p4 != p2 && p4 != p3)
						{
							coordIndex[j++] = c1;	
							coordIndex[j++] = c2;	
							coordIndex[j++] = c4;	
							coordIndex[j++] = -1;	
							colorIndex[k++] = 4;
							coordIndex[j++] = c2;	
							coordIndex[j++] = c3;	
							coordIndex[j++] = c4;	
							coordIndex[j++] = -1;	
							colorIndex[k++] = 4;
						}
						else
						{
							coordIndex[j++] = c1;	
							coordIndex[j++] = c2;	
							coordIndex[j++] = c3;	
							coordIndex[j++] = c4;
							coordIndex[j++] = -1;
							if (p1 == p2 && p1 == p3 && p1 == p4)
							{
								if (row % 2 == 0)
								{
									if (col % 2 == 0)
										colorIndex[k++] = 1;
									else
										colorIndex[k++] = 2;
								}
								else
								{
									if (col % 2 == 0)
										colorIndex[k++] = 2;
									else
										colorIndex[k++] = 1;
								}
							}
							else
								colorIndex[k++] = 4;
						}
					}
				}
				coord.set_point = point;
				Grond.set_coordIndex = coordIndex;
				Grond.set_colorIndex = colorIndex;
			}
			function new_object(Objects)
			{
				var i;
				print(Objects.children);
				for (i = 0; i < Objects.children.length; i++)
				{
					if (Objects.children[i].whichChoice == -1)
					{
						print('new_object: ' + i);
						return i;
					}
				}
				return null;
			}
			function hitPoint_changed(vec)
			{
				hitPoint = vec;
			}
			function addobject()
			{
				var object;
				var choice;

				if (command == 'robot')
					choice = Robots;
				else
					choice = Boulders;
				objectindex = new_object(choice);
				object = choice.children[objectindex];
				if (command == 'boulder')
				{
					object.set_index = objectindex;
					object.set_script = myself;
				}
				if (command == 'robot')
					newrobot = object;
				return object;
			}
			function openVault(value)
			{
				var object;
				object = addobject();
				object.set_translation = new SFVec3f(Math.floor(hitPoint.x) + 0.5, hitPoint.y, Math.floor(hitPoint.z) + 0.5);
				if (command == 'robot')
				{
					var translation;
					var translation2;
					var angle;
	
					translation = object.translation;
					if (toggle)
						translation2 = view2.position;
					else
						translation2 = view1.position;
					print('translation: ' + translation);
					print('translation2: ' + translation2);
					print('currob: ' + currentrobot.translation);
					angle = Math.atan((translation.x - translation2.x) / (translation.z - translation2.z));
					object.set_rotation = new SFRotation(0, 1, 0, angle);
					if (toggle)
					{
						view2.set_orientation = new SFRotation(0, 1, 0, angle);
						view1.set_position = new SFVec3f(translation.x, translation.y + 0.5, translation.z);
						view1.set_orientation = new SFRotation(0, 1, 0, angle + 3.14);
					}
					else
					{
						view1.set_orientation = new SFRotation(0, 1, 0, angle);
						view2.set_position = new SFVec3f(translation.x, translation.y + 0.5, translation.z);
						view2.set_orientation = new SFRotation(0, 1, 0, angle + 3.14);
					}
					currentrobot.set_rotation = new SFRotation(0, 1, 0, angle + 3.14);
				}
			}
			function boulder_touched(index, timestamp)
			{
				var object;
				var translation;

				print('boulder_touched: index = ' + index + ', timestamp = ' + timestamp);
				boulder = Boulders.children[index];
				if (command == 'absorb')
					boulder.fadeout = timestamp;
				else
				{		
					var object;
					translation = boulder.translation;
					object = addobject();
					object.set_translation = new SFVec3f(translation.x, translation.y + 0.5, translation.z);
				}
			}
			function newcommand(value)
			{
				if (value == 'transform')
				{
					var angle;
					var translation;
					var translation2;

					translation = newrobot.translation;
					translation2 = oldview.position;
					angle = Math.atan((translation.x - translation2.x) / (translation.z - translation2.z));
					print(translation);
					print(translation2);
					print('angle: ',angle);
					print('viewangle: ',oldview.orientation.angle);
					objectindex = new_object(Robots);
					object = Robots.children[objectindex];
					object.set_translation = new SFVec3f(translation2.x, translation2.y - 0.5, translation2.z);
					newview.set_position = new SFVec3f(translation.x, translation.y + 0.5, translation.z);
					newview.set_orientation = new SFRotation(0, 1, 0, angle + 3.14);
					object.set_rotation = new SFRotation(0, 1, 0, angle + 3.14);
					new_view();
					newrobot.set_whichChoice = -1;
				}
				else
					command = value;
			}"
		}
	]
}

ROUTE Clicker.hitPoint_changed TO SentinelScript.hitPoint_changed
ROUTE Clicker.touchTime TO SentinelScript.openVault
ROUTE V1.isBound TO SentinelScript.isBoundV1
ROUTE V2.isBound TO SentinelScript.isBoundV2
