#VRML V2.0 utf8

EXTERNPROTO Socket [ exposedField SFVec3f translation] ["socket.wrl"]

EXTERNPROTO Object
[
	inputOnly   SFString set_proto_name
	inputOutput SFVec3f translation
	inputOutput SFVec3f scale
	inputOutput SFNode  instance
	outputOnly  SFNode  remove_instance_changed
	outputOnly  SFNode  robot_position_changed
]
["object.wrl"]

Background
{ 
	skyColor [ 0 0 0.3 ]
}

DEF V1 Viewpoint
{ 
	position       18.5 9.5 18.5
	description    "Sentinel 1"
#	jump FALSE
}

DirectionalLight
{ 
	direction      0 -1 0
}

NavigationInfo
{ 
  type [ "PAN", "EXAMINE", "FLY" ]
}

DEF Sentinel Group
{
	children
	[	
		DEF Clicker TouchSensor {}
		DEF Keyboard KeySensor {}
		Shape
		{ 
			geometry DEF Grond IndexedFaceSet
			{
				colorPerVertex FALSE
				solid FALSE
				coord DEF coord Coordinate { }
				color Color
				{
					color [ 0 0 0, 0 0 1, 0 1 0, 0 1 1, 0.2 0.2 0.2, 1 0 1, 1 1 0, 1 1 1 ]
				}
			}
			appearance Appearance
			{
				material Material { diffuseColor 1 0 0 }
			}
		}
		DEF SentinelScript Script
		{ 
			# Declarations of what's in this Script node:
			directOutput TRUE
			mustEvaluate TRUE
		  	field MFVec3f point []
			field SFNode Grond USE Grond
			field SFNode coord USE coord
			field MFInt32 coordIndex [ ]
			field MFInt32 colorIndex [ ]
			eventIn SFVec3f hitPoint_changed
			eventIn SFVec3f hitNormal_changed
			eventOut SFVec3f set_translation
			eventIn SFTime openVault
			eventIn SFInt32 boulder_touched
			eventIn SFString keyPress
			eventIn SFNode set_removeChild
			eventIn SFNode set_robot_position
			field SFNode socket Socket { translation 4.5 11 12.5 }
			field SFNode sentinel USE Sentinel
			field SFNode myself USE SentinelScript
			field SFNode view1 USE V1
			field SFBool toggle FALSE
			field SFNode currentrobot Transform { }
			eventOut SFNode kwats
			eventIn SFBool isOver
			
			url "javascript:
			var row, kol, i, j, k;
			var vertex;
			var color;
			var hitPoint;
			var hitNormal;
			var hitTime;
			var focused;
					
			
			function initialize()
			{
				var RowSize;
				var ColSize;
				var p1, p2, p3, p4;
				var c1, c2, c3, c4;
				var yCoord =
				[
//					  0   1   2   3   4   5   6   7   8   9  10  11  12  13  14  15  16  17  18  19  20  21  22  23  24  25		
					[ 9, 10, 10, 10, 10, 10, 10,  9,  9,  9,  9,  9,  9,  8,  8,  8,  8,  9,  9,  9,  9,  9,  8,  7,  6,  6 ],
					[ 9, 10, 10, 11, 11, 10, 10, 10, 10, 10, 10, 10, 10,  9,  9,  9,  9, 10, 10, 10, 10,  9,  8,  7,  7,  7 ],
					[ 9, 10, 10, 11, 11, 10, 10, 10, 10, 10, 11, 11, 11,  9, 10, 10, 10, 10, 10, 10, 10,  9,  8,  8,  8,  8 ],
					[ 9, 10, 10, 10, 10, 10,  9,  9, 10, 10, 11, 11, 11, 11, 10, 10, 10, 10, 10, 10, 10, 10,  9,  9,  9,  9 ],
					[ 9, 10, 10, 10, 10,  9,  9,  9,  9, 10, 11, 11, 11, 11, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10 ],
					[ 9, 10, 10, 10, 10,  9,  9,  9,  9, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10 ],
					[ 9, 10, 10, 10, 10,  9,  9,  9,  9,  9,  9,  9,  9,  9,  9,  9, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10 ],
					[ 9, 10, 10, 10, 10,  9,  9,  9,  9,  9,  8,  8,  8,  8,  8,  8,  9,  9,  9, 10, 10, 10, 10, 10, 10, 10 ],
					[ 8,  9, 10, 10, 10,  9,  9,  9,  9,  8,  8,  8,  8,  8,  8,  8,  8,  8,  8,  9,  9,  9,  9,  9,  9,  9 ],
					[ 8,  9, 10, 10, 10,  9,  9,  8,  8,  8,  8,  8,  8,  8,  7,  7,  8,  8,  8,  9,  9,  9,  9,  9,  9,  9 ],
					[ 9,  9, 10, 10, 10, 10,  9,  8,  8,  8,  8,  8,  8,  8,  7,  7,  7,  7,  7,  8,  8,  9,  9,  9,  9,  9 ],
					[ 9, 10, 11, 11, 11, 10, 10,  9,  9,  9,  9,  9,  8,  8,  7,  7,  7,  7,  7,  8,  8,  9,  9,  9,  9,  9 ],
					[ 9, 10, 11, 11, 11, 11, 10, 10,  9,  9,  9,  9,  8,  8,  7,  7,  7,  7,  7,  8,  8,  9,  9,  9,  9,  9 ],
					[ 9, 10, 11, 11, 11, 11, 10, 10, 10, 10,  9,  9,  8,  8,  7,  7,  8,  8,  8,  8,  8,  9,  9,  9,  9,  9 ],
					[ 9, 10, 10, 11, 11, 10, 10, 10, 10, 10,  9,  9,  8,  7,  7,  7,  8,  8,  9,  9,  9,  9,  9,  9,  9,  9 ],
					[ 9, 10, 10, 10, 10, 10,  9,  9,  9,  9,  9,  9,  9,  7,  7,  7,  8,  8,  9,  9,  9,  9,  9,  9,  9,  9 ],
					[ 9, 10, 10, 10, 10, 10,  9,  8,  8,  9,  9,  9,  8,  7,  7,  7,  8,  8,  9,  9,  9,  9,  9,  9,  9,  8 ],
					[ 9, 10, 10, 10, 10, 10,  8,  8,  8,  8,  9,  9,  8,  7,  7,  7,  8,  8,  9,  9, 10, 10,  9,  9,  9,  8 ],
					[ 9, 10, 10, 10, 10, 10,  8,  8,  8,  8,  9,  9,  8,  7,  7,  7,  7,  8,  9,  9, 10, 10,  9,  9,  8,  7 ],
					[ 9, 10, 10, 10, 10, 10,  9,  8,  8,  8,  9,  9,  8,  7,  7,  7,  7,  8,  9,  9,  9,  9,  9,  9,  8,  7 ]
				];
				sentinel.addChildren = new MFNode(socket);
				RowSize = yCoord.length;
				ColSize = yCoord[0].length;
				i = RowSize * ColSize;
				color = 1;
				newrobot = null;
				//currentrobot = Robots.children[0];
				for (row = RowSize - 1; row >= 0; row--)
				{
					for (col = ColSize - 1; col >= 0; col--)
					{
						vertex = new SFVec3f(col, yCoord[row][col], row);
						point[--i] = vertex;
					}
				}
				j = 0;
				k = 0;
				for (row = 0; row < RowSize - 1; row++)
				{
					for (col = 0; col < ColSize - 1; col++)
					{
						p1 = yCoord[row][col];
						p2 = yCoord[row][col + 1];
						p3 = yCoord[row + 1][col + 1];
						p4 = yCoord[row + 1][col];
						c1 = row * ColSize + col;
						c2 = c1 + 1;
						c3 = c2 + ColSize;
						c4 = c1 + ColSize;
		
						if (p1 != p2 && p1 != p3 && p1 != p4)
						{
							coordIndex[j++] = c1;	
							coordIndex[j++] = c2;	
							coordIndex[j++] = c3;	
							coordIndex[j++] = -1;
							colorIndex[k++] = 4;
							coordIndex[j++] = c1;	
							coordIndex[j++] = c3;	
							coordIndex[j++] = c4;	
							coordIndex[j++] = -1;	
							colorIndex[k++] = 4;
						}
						else if (p2 != p1 && p2 != p3 && p2 != p4)
						{
							coordIndex[j++] = c1;	
							coordIndex[j++] = c2;	
							coordIndex[j++] = c4;	
							coordIndex[j++] = -1;	
							colorIndex[k++] = 4;
							coordIndex[j++] = c2;	
							coordIndex[j++] = c3;	
							coordIndex[j++] = c4;	
							coordIndex[j++] = -1;	
							colorIndex[k++] = 4;
						}
						else if (p3 != p1 && p3 != p2 && p3 != p4)
						{
							coordIndex[j++] = c1;	
							coordIndex[j++] = c2;	
							coordIndex[j++] = c3;	
							coordIndex[j++] = -1;	
							colorIndex[k++] = 4;
							coordIndex[j++] = c1;	
							coordIndex[j++] = c3;	
							coordIndex[j++] = c4;	
							coordIndex[j++] = -1;	
							colorIndex[k++] = 4;
						}
						else if (p4 != p1 && p4 != p2 && p4 != p3)
						{
							coordIndex[j++] = c1;	
							coordIndex[j++] = c2;	
							coordIndex[j++] = c4;	
							coordIndex[j++] = -1;	
							colorIndex[k++] = 4;
							coordIndex[j++] = c2;	
							coordIndex[j++] = c3;	
							coordIndex[j++] = c4;	
							coordIndex[j++] = -1;	
							colorIndex[k++] = 4;
						}
						else
						{
							coordIndex[j++] = c1;	
							coordIndex[j++] = c2;	
							coordIndex[j++] = c3;	
							coordIndex[j++] = c4;
							coordIndex[j++] = -1;
							if (p1 == p2 && p1 == p3 && p1 == p4)
							{
								if (row % 2 == 0)
								{
									if (col % 2 == 0)
										colorIndex[k++] = 1;
									else
										colorIndex[k++] = 2;
								}
								else
								{
									if (col % 2 == 0)
										colorIndex[k++] = 2;
									else
										colorIndex[k++] = 1;
								}
							}
							else
								colorIndex[k++] = 4;
						}
					}
				}
				coord.set_point = point;
				Grond.set_coordIndex = coordIndex;
				Grond.set_colorIndex = colorIndex;
			}
			function hitPoint_changed(vec)
			{
				hitPoint = vec;
			}
			function hitNormal_changed(vec)
			{
				hitNormal = vec;
			}
			function addobject(proto, scale, translation)
			{
				var   scene = Browser.currentScene
					, object = scene.createProto('Object')
					, translation1 = translation === undefined ? new SFVec3f(Math.floor(hitPoint.x) + 0.5, hitPoint.y, Math.floor(hitPoint.z) + 0.5) : translation
					, translation2 = view1.position
					, angle = Math.atan((translation1.x - translation2.x) / (translation1.z - translation2.z))
					;
					
				sentinel.addChildren = new MFNode(object);
				print('addobject: translation = ' + translation1);
				object.set_translation = translation1;
				if (scale !== undefined) {
					object.set_scale = scale;
				}

				print(translation1);
				print(translation2);
				print('angle: ' + angle);
				if (translation2.z < translation1.z) angle += 3.14;
				print('viewangle: ' + view1.orientation.angle);
				object.set_rotation = new SFRotation(0, 1, 0, angle);

				object.set_instance = object;
				object.set_sentinel_script = myself;
				object.set_proto_name = proto;
				print(object);
				return object;
			}
			function keyPress(key)
			{
				var object;

				if (focused && hitNormal.x === 0 && hitNormal.z === 0)
				{
					print('SentinelScript: key = ' + key);
					if (key === 'b')
					{
						object = addobject('Boulder');
					}				
					if (key === 'r')
					{
						object = addobject('Robot', new SFVec3f(0.5, 0.5, 0.5));
					}				
					if (key === 't')
					{
						object = addobject('Boom', new SFVec3f(0.5, 0.5, 0.5));
					}				
				}
			}
			function set_removeChild(child)
			{
				print('removeChild: ' + child);
				sentinel.removeChildren = new MFNode(child);
			}
			function set_robot_position(child)
			{
				var translation = child.translation;
				var position = view1.position;
				var new_translation = SFVec3f(position.x, position.y - 0.5, position.z);
				var angle = Math.atan((translation.x - position.x) / (translation.z - position.z))

				print('angle: ' + angle);
				if (translation.z < position.z) angle += 3.14;
				print('angle: ' + angle);
				
				print('set_robot_position, translation: ' + translation);
				print(position);
				print(child);
				view1.position = new SFVec3f(translation.x, translation.y + 0.5, translation.z);
				view1.set_orientation = new SFRotation(0, 1, 0, angle);
				
				sentinel.removeChildren = new MFNode(child);
				addobject('Robot', new SFVec3f(0.5, 0.5, 0.5), new_translation);
			}
			function isOver(value)
			{
				print('SentinelScript, isOver: ' + value);
				focused = value;
			}"
		}
	]
}

ROUTE Clicker.hitPoint_changed TO SentinelScript.hitPoint_changed
ROUTE Clicker.hitNormal_changed TO SentinelScript.hitNormal_changed
ROUTE Keyboard.keyPress TO SentinelScript.keyPress
ROUTE Clicker.isOver TO SentinelScript.isOver
