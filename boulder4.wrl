#VRML V2.0 utf8

PROTO Boulder
[
	exposedField  SFVec3f translation 0 0 0
	exposedField  SFNode instance NULL
	outputOnly    SFNode remove_instance_changed
]
{
	DEF T Transform
	{
		translation IS translation
		children
		[
			Shape
			{
				geometry IndexedFaceSet
				{
					coordIndex
					[
						0, 2, 4, 6, -1,
						7, 5, 3, 1, -1
						0, 1, 2, -1,
						2, 1, 3, -1,
						2, 3, 4, -1,
						4, 3, 5, -1,
						4, 5, 6, -1,
						6, 5, 7, -1
						6, 7, 0, -1,
						0, 7, 1, -1
					]
					coord Coordinate
					{
						point [ 0.5 0 0, 0.354 0.5 0.354, 0 0 0.5, -0.354 0.5 0.354, -0.5 0 0, -0.354 0.5 -0.354, 0 0 -0.5, 0.354 0.5 -0.354 ] 
					}
					color Color
					{
						color [ 0 0 0, 0 0 1, 0 1 0, 0 1 1, 1 0 0, 1 0 1, 1 1 0, 1 1 1 ]
					}
					colorIndex [ 1, 2, 3, 4, 5, 6, 7, 1, 2, 3 ]
					colorPerVertex FALSE
				}
				appearance Appearance
				{
					material DEF M Material
					{
						diffuseColor 1 0 0
						transparency 0.5
					}
		        }
			}
			DEF TS TouchSensor {}
			DEF Keyboard KeySensor {}
			DEF FadeIn TimeSensor
			{
				cycleInterval 2.0
			}
			DEF FadeOut TimeSensor
			{
				cycleInterval 2.0
			}
			DEF BoulderScript Script
			{ 
				eventIn SFFloat in_fraction_changed
				eventOut SFFloat out_fraction_changed
				eventOut SFTime startTime
				eventIn SFVec3f translation_changed
				eventIn SFString keyPress
				field SFNode FadeOut USE FadeOut
				eventIn SFBool isActive
				eventIn SFBool isOver
				inputOutput SFNode instance IS instance
				#inputOnly  SFNode instance_changed
				outputOnly  SFNode remove_instance_changed IS remove_instance_changed
			    url "javascript:
					var focused;
					
					function translation_changed(translation, timestamp)
					{
						print('BoulderScript, translation_changed: translation = ' + translation + ', timestamp = ' + timestamp);
						startTime = timestamp;
					}
					function instance_changed(instance)
					{
						print('BoulderScript, instance_changed: instance = ' + instance);
					}
					function instance(inst)
					{
						print('BoulderScript, instance: instance = ' + inst);
					}
					function in_fraction_changed(value)
					{
						out_fraction_changed = 1.0 - value;
					}
					function js_startTime()
					{
						var   date = new Date()
							, time = date.getTime()
							;
							
						return time / 1000;
					}
					function keyPress(key)
					{
						if (focused)
						{
							print('BoulderScript, keyPress: key = ' + key);
							print('BoulderScript, keyPress: instance = ' + instance);
							if (key === 'a')
							{
								FadeOut.startTime = js_startTime();
							}				
						}
					}
					function isOver(value)
					{
						print('BoulderScript, isOver: ' + value);
						focused = value;
					}
					function isActive(value)
					{
						print('BoulderScript, isActive: ' + value);
						if (!value)
						{
							print('REMOVE');
							remove_instance_changed = instance;
						}
					}"
			}
		]
		ROUTE T.translation_changed TO BoulderScript.translation_changed
		ROUTE BoulderScript.startTime TO FadeIn.startTime 
		ROUTE FadeIn.fraction_changed TO BoulderScript.in_fraction_changed
		ROUTE BoulderScript.out_fraction_changed TO M.transparency
		ROUTE Keyboard.keyPress TO BoulderScript.keyPress
		ROUTE FadeOut.fraction_changed TO M.transparency
		ROUTE FadeOut.isActive TO BoulderScript.isActive
		ROUTE TS.isOver TO BoulderScript.isOver
	}
}
