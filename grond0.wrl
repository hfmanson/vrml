#VRML V2.0 utf8

EXTERNPROTO Socket [ exposedField SFVec3f translation] ["socket.wrl"]

Background
{ 
	skyColor [ 0 0 0.3 ]
}

#Viewpoint
#{ 
#	position       10 10 30
#	description    "AJ's gezichtspunt"
#}

DEF V1 Viewpoint
{ 
	position       18.5 9.5 18.5
	description    "Sentinel 1"
#	jump FALSE
}

DEF V2 Viewpoint
{ 
	position       18.5 9.5 18.5
	description    "Sentinel 2"
#	jump FALSE
}

DirectionalLight
{ 
	direction      0 -1 0
}

NavigationInfo
{ 
  type [ "EXAMINE" ]
}

DEF Sentinel Group
{
	children
	[	
		Shape
		{ 
			geometry DEF Grond IndexedFaceSet
			{
				colorPerVertex FALSE
				solid FALSE
				coord DEF coord Coordinate { }
				color Color
				{
					color [ 0 0 0, 0 0 1, 0 1 0, 0 1 1, 0.2 0.2 0.2, 1 0 1, 1 1 0, 1 1 1 ]
				}
			}
			appearance Appearance
			{
				material Material { diffuseColor 1 0 0 }
			}
		}
		DEF SentinelScript Script
		{ 
			# Declarations of what's in this Script node:
			directOutput TRUE
			mustEvaluate TRUE
		  	field MFVec3f point []
			field SFNode Grond USE Grond
			field SFNode coord USE coord
			field MFInt32 coordIndex [ ]
			field MFInt32 colorIndex [ ]
			field SFNode socket Socket { translation 4.5 11 12.5 }
			field SFNode sentinel USE Sentinel
			field SFNode myself USE SentinelScript
			field SFNode view1 USE V1
			field SFNode view2 USE V2
			field SFBool toggle FALSE
			field SFNode currentrobot Transform { }
#			field SFNode newrobot Transform { }
			url "javascript:
			var row, kol, i, j, k;
			var vertex;
			var color;
			var hitPoint;
			var hitTime;
			var command;
			var objectindex;
			var newrobot;
			var currentrobot;
			var oldview;		
			var newview;		
			function initialize()
			{
				var RowSize;
				var ColSize;
				var p1, p2, p3, p4;
				var c1, c2, c3, c4;
				var yCoord = [
//					  0   1   2   3   4   5   6   7   8   9  10  11  12  13  14  15  16  17  18  19  20  21  22  23  24  25
					[ 9, 10, 10, 10, 10, 10, 10,  9,  9,  9,  9,  9,  9,  8,  8,  8,  8,  9,  9,  9,  9,  9,  8,  7,  6,  6 ],
					[ 9, 10, 10, 11, 11, 10, 10, 10, 10, 10, 10, 10, 10,  9,  9,  9,  9, 10, 10, 10, 10,  9,  8,  7,  7,  7 ],
					[ 9, 10, 10, 11, 11, 10, 10, 10, 10, 10, 11, 11, 11,  9, 10, 10, 10, 10, 10, 10, 10,  9,  8,  8,  8,  8 ],
					[ 9, 10, 10, 10, 10, 10,  9,  9, 10, 10, 11, 11, 11, 11, 10, 10, 10, 10, 10, 10, 10, 10,  9,  9,  9,  9 ],
					[ 9, 10, 10, 10, 10,  9,  9,  9,  9, 10, 11, 11, 11, 11, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10 ],
					[ 9, 10, 10, 10, 10,  9,  9,  9,  9, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10 ],
					[ 9, 10, 10, 10, 10,  9,  9,  9,  9,  9,  9,  9,  9,  9,  9,  9, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10 ],
					[ 9, 10, 10, 10, 10,  9,  9,  9,  9,  9,  8,  8,  8,  8,  8,  8,  9,  9,  9, 10, 10, 10, 10, 10, 10, 10 ],
					[ 8,  9, 10, 10, 10,  9,  9,  9,  9,  8,  8,  8,  8,  8,  8,  8,  8,  8,  8,  9,  9,  9,  9,  9,  9,  9 ],
					[ 8,  9, 10, 10, 10,  9,  9,  8,  8,  8,  8,  8,  8,  8,  7,  7,  8,  8,  8,  9,  9,  9,  9,  9,  9,  9 ],
					[ 9,  9, 10, 10, 10, 10,  9,  8,  8,  8,  8,  8,  8,  8,  7,  7,  7,  7,  7,  8,  8,  9,  9,  9,  9,  9 ],
					[ 9, 10, 11, 11, 11, 10, 10,  9,  9,  9,  9,  9,  8,  8,  7,  7,  7,  7,  7,  8,  8,  9,  9,  9,  9,  9 ],
					[ 9, 10, 11, 11, 11, 11, 10, 10,  9,  9,  9,  9,  8,  8,  7,  7,  7,  7,  7,  8,  8,  9,  9,  9,  9,  9 ],
					[ 9, 10, 11, 11, 11, 11, 10, 10, 10, 10,  9,  9,  8,  8,  7,  7,  8,  8,  8,  8,  8,  9,  9,  9,  9,  9 ],
					[ 9, 10, 10, 11, 11, 10, 10, 10, 10, 10,  9,  9,  8,  7,  7,  7,  8,  8,  9,  9,  9,  9,  9,  9,  9,  9 ],
					[ 9, 10, 10, 10, 10, 10,  9,  9,  9,  9,  9,  9,  9,  7,  7,  7,  8,  8,  9,  9,  9,  9,  9,  9,  9,  9 ],
					[ 9, 10, 10, 10, 10, 10,  9,  8,  8,  9,  9,  9,  8,  7,  7,  7,  8,  8,  9,  9,  9,  9,  9,  9,  9,  8 ],
					[ 9, 10, 10, 10, 10, 10,  8,  8,  8,  8,  9,  9,  8,  7,  7,  7,  8,  8,  9,  9, 10, 10,  9,  9,  9,  8 ],
					[ 9, 10, 10, 10, 10, 10,  8,  8,  8,  8,  9,  9,  8,  7,  7,  7,  7,  8,  9,  9, 10, 10,  9,  9,  8,  7 ],
					[ 9, 10, 10, 10, 10, 10,  9,  8,  8,  8,  9,  9,  8,  7,  7,  7,  7,  8,  9,  9,  9,  9,  9,  9,  8,  7 ]
				];

				sentinel.addChildren = new MFNode(socket);
				RowSize = yCoord.length;
				ColSize = yCoord[0].length;
				print(yCoord[0]);
				i = RowSize * ColSize;
				color = 1;
				for (row = RowSize - 1; row >= 0; row--)
				{
					for (col = ColSize - 1; col >= 0; col--)
					{
						vertex = new SFVec3f(col, yCoord[row][col], row);
						point[--i] = vertex;
					}
				}
				j = 0;
				k = 0;
				for (row = 0; row < RowSize - 1; row++)
				{
					for (col = 0; col < ColSize - 1; col++)
					{
						p1 = yCoord[row][col];
						p2 = yCoord[row][col + 1];
						p3 = yCoord[row + 1][col + 1];
						p4 = yCoord[row + 1][col];
						c1 = row * ColSize + col;
						c2 = c1 + 1;
						c3 = c2 + ColSize;
						c4 = c1 + ColSize;
		
						if (p1 != p2 && p1 != p3 && p1 != p4)
						{
							coordIndex[j++] = c1;	
							coordIndex[j++] = c2;	
							coordIndex[j++] = c3;	
							coordIndex[j++] = -1;
							colorIndex[k++] = 4;
							coordIndex[j++] = c1;	
							coordIndex[j++] = c3;	
							coordIndex[j++] = c4;	
							coordIndex[j++] = -1;	
							colorIndex[k++] = 4;
						}
						else if (p2 != p1 && p2 != p3 && p2 != p4)
						{
							coordIndex[j++] = c1;	
							coordIndex[j++] = c2;	
							coordIndex[j++] = c4;	
							coordIndex[j++] = -1;	
							colorIndex[k++] = 4;
							coordIndex[j++] = c2;	
							coordIndex[j++] = c3;	
							coordIndex[j++] = c4;	
							coordIndex[j++] = -1;	
							colorIndex[k++] = 4;
						}
						else if (p3 != p1 && p3 != p2 && p3 != p4)
						{
							coordIndex[j++] = c1;	
							coordIndex[j++] = c2;	
							coordIndex[j++] = c3;	
							coordIndex[j++] = -1;	
							colorIndex[k++] = 4;
							coordIndex[j++] = c1;	
							coordIndex[j++] = c3;	
							coordIndex[j++] = c4;	
							coordIndex[j++] = -1;	
							colorIndex[k++] = 4;
						}
						else if (p4 != p1 && p4 != p2 && p4 != p3)
						{
							coordIndex[j++] = c1;	
							coordIndex[j++] = c2;	
							coordIndex[j++] = c4;	
							coordIndex[j++] = -1;	
							colorIndex[k++] = 4;
							coordIndex[j++] = c2;	
							coordIndex[j++] = c3;	
							coordIndex[j++] = c4;	
							coordIndex[j++] = -1;	
							colorIndex[k++] = 4;
						}
						else
						{
							coordIndex[j++] = c1;	
							coordIndex[j++] = c2;	
							coordIndex[j++] = c3;	
							coordIndex[j++] = c4;
							coordIndex[j++] = -1;
							if (p1 == p2 && p1 == p3 && p1 == p4)
							{
								if (row % 2 == 0)
								{
									if (col % 2 == 0)
										colorIndex[k++] = 1;
									else
										colorIndex[k++] = 2;
								}
								else
								{
									if (col % 2 == 0)
										colorIndex[k++] = 2;
									else
										colorIndex[k++] = 1;
								}
							}
							else
								colorIndex[k++] = 4;
						}
					}
				}
				coord.set_point = point;
				Grond.set_coordIndex = coordIndex;
				Grond.set_colorIndex = colorIndex;
			}"
		}
	]
}
